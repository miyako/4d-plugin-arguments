/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-arguments.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : arguments
 #	author : miyako
 #	2024/05/27
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-arguments.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- arguments
            
			case 1 :
				Get_command_line(params);
				break;

        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void Get_command_line(PA_PluginParameters params) {

    PA_CollectionRef returnValue = PA_CreateCollection();
    
#if VERSIONMAC
    NSArray<NSString *> *arguments =[[NSProcessInfo processInfo]arguments];
    for(NSUInteger i = 0; i < [arguments count]; ++i) {
        NSString *argument = [arguments objectAtIndex:i];
        NSUInteger len = [argument length];
        NSUInteger size = (len * sizeof(PA_Unichar)) + sizeof(PA_Unichar);
        std::vector<uint8_t> buf(size);
        if([argument getCString:(char *)&buf[0] maxLength:size encoding:NSUnicodeStringEncoding]){
            PA_Unistring u = PA_CreateUnistring((PA_Unichar *)&buf[0]);
            PA_Variable v = PA_CreateVariable(eVK_Unistring);
            PA_SetStringVariable(&v, &u);
            PA_SetCollectionElement(returnValue, PA_GetCollectionLength(returnValue), v);
            PA_ClearVariable(&v);
        }
    }
#endif
    
#if VERSIONWIN
    int NumArgs = 0;
    LPWSTR lpCmdLine = GetCommandLineW();
    LPWSTR *szArglist = CommandLineToArgvW((LPCWSTR)lpCmdLine, &NumArgs);
    if(szArglist) {
        for(unsigned int i = 0; i < NumArgs; ++i){
            PA_Unistring u = PA_CreateUnistring((PA_Unichar *)szArglist[i]);
            PA_Variable v = PA_CreateVariable(eVK_Unistring);
            PA_SetStringVariable(&v, &u);
            PA_SetCollectionElement(returnValue, PA_GetCollectionLength(returnValue), v);
            PA_ClearVariable(&v);
        }
        LocalFree(szArglist);
    }
#endif
    
    PA_ReturnCollection(params, returnValue);
}

